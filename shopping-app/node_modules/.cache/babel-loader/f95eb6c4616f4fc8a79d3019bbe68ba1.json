{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    itemsList: [],\n    totalQuantity: 0,\n    showCart: false,\n    changed: false\n  },\n  reducers: {\n    replaceData(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.itemsList = action.payload.itemsList;\n    },\n\n    addToCart(state, action) {\n      state.changed = true;\n      const newItem = action.payload; // to check if item is already available\n\n      const existingItem = state.itemsList.find(item => item.id === newItem.id);\n\n      if (existingItem) {\n        existingItem.quantity++;\n        existingItem.totalPrice += newItem.price;\n      } else {\n        state.itemsList.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.name\n        });\n        state.totalQuantity++;\n      }\n    },\n\n    removeFromCart(state, action) {\n      state.changed = true;\n      const id = action.payload;\n      const existingItem = state.itemsList.find(item => item.id === id);\n\n      if (existingItem.quantity === 1) {\n        state.itemsList = state.itemsList.filter(item => item.id !== id);\n        state.totalQuantity--;\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice -= existingItem.price;\n      }\n    },\n\n    setShowCart(state) {\n      state.showCart = !state.showCart;\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/home/ankit/Redux/shopping-app/Redux-Shopping-Cart-App/src/store/cart-clice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","itemsList","totalQuantity","showCart","changed","reducers","replaceData","state","action","payload","addToCart","newItem","existingItem","find","item","id","quantity","totalPrice","price","push","removeFromCart","filter","setShowCart","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,MAAMC,SAAS,GAAGF,WAAW,CAAC;AAC5BG,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,SAAS,EAAE,EADC;AAEZC,IAAAA,aAAa,EAAE,CAFH;AAGZC,IAAAA,QAAQ,EAAE,KAHE;AAIZC,IAAAA,OAAO,EAAE;AAJG,GAFc;AAQ5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACzBD,MAAAA,KAAK,CAACL,aAAN,GAAsBM,MAAM,CAACC,OAAP,CAAeP,aAArC;AACAK,MAAAA,KAAK,CAACN,SAAN,GAAkBO,MAAM,CAACC,OAAP,CAAeR,SAAjC;AACD,KAJO;;AAKRS,IAAAA,SAAS,CAACH,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACH,OAAN,GAAgB,IAAhB;AACA,YAAMO,OAAO,GAAGH,MAAM,CAACC,OAAvB,CAFuB,CAGvB;;AACA,YAAMG,YAAY,GAAGL,KAAK,CAACN,SAAN,CAAgBY,IAAhB,CAClBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,OAAO,CAACI,EADX,CAArB;;AAIA,UAAIH,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAACI,QAAb;AACAJ,QAAAA,YAAY,CAACK,UAAb,IAA2BN,OAAO,CAACO,KAAnC;AACD,OAHD,MAGO;AACLX,QAAAA,KAAK,CAACN,SAAN,CAAgBkB,IAAhB,CAAqB;AACnBJ,UAAAA,EAAE,EAAEJ,OAAO,CAACI,EADO;AAEnBG,UAAAA,KAAK,EAAEP,OAAO,CAACO,KAFI;AAGnBF,UAAAA,QAAQ,EAAE,CAHS;AAInBC,UAAAA,UAAU,EAAEN,OAAO,CAACO,KAJD;AAKnBnB,UAAAA,IAAI,EAAEY,OAAO,CAACZ;AALK,SAArB;AAOAQ,QAAAA,KAAK,CAACL,aAAN;AACD;AACF,KA1BO;;AA2BRkB,IAAAA,cAAc,CAACb,KAAD,EAAQC,MAAR,EAAgB;AAC5BD,MAAAA,KAAK,CAACH,OAAN,GAAgB,IAAhB;AACA,YAAMW,EAAE,GAAGP,MAAM,CAACC,OAAlB;AAEA,YAAMG,YAAY,GAAGL,KAAK,CAACN,SAAN,CAAgBY,IAAhB,CAAsBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAA3C,CAArB;;AACA,UAAIH,YAAY,CAACI,QAAb,KAA0B,CAA9B,EAAiC;AAC/BT,QAAAA,KAAK,CAACN,SAAN,GAAkBM,KAAK,CAACN,SAAN,CAAgBoB,MAAhB,CAAwBP,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAA7C,CAAlB;AACAR,QAAAA,KAAK,CAACL,aAAN;AACD,OAHD,MAGO;AACLU,QAAAA,YAAY,CAACI,QAAb;AACAJ,QAAAA,YAAY,CAACK,UAAb,IAA2BL,YAAY,CAACM,KAAxC;AACD;AACF,KAvCO;;AAwCRI,IAAAA,WAAW,CAACf,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACJ,QAAN,GAAiB,CAACI,KAAK,CAACJ,QAAxB;AACD;;AA1CO;AARkB,CAAD,CAA7B;AAsDA,OAAO,MAAMoB,WAAW,GAAGzB,SAAS,CAAC0B,OAA9B;AAEP,eAAe1B,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    itemsList: [],\n    totalQuantity: 0,\n    showCart: false,\n    changed: false,\n  },\n  reducers: {\n    replaceData(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.itemsList = action.payload.itemsList;\n    },\n    addToCart(state, action) {\n      state.changed = true;\n      const newItem = action.payload;\n      // to check if item is already available\n      const existingItem = state.itemsList.find(\n        (item) => item.id === newItem.id\n      );\n\n      if (existingItem) {\n        existingItem.quantity++;\n        existingItem.totalPrice += newItem.price;\n      } else {\n        state.itemsList.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.name,\n        });\n        state.totalQuantity++;\n      }\n    },\n    removeFromCart(state, action) {\n      state.changed = true;\n      const id = action.payload;\n\n      const existingItem = state.itemsList.find((item) => item.id === id);\n      if (existingItem.quantity === 1) {\n        state.itemsList = state.itemsList.filter((item) => item.id !== id);\n        state.totalQuantity--;\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice -= existingItem.price;\n      }\n    },\n    setShowCart(state) {\n      state.showCart = !state.showCart;\n    },\n  },\n});\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}